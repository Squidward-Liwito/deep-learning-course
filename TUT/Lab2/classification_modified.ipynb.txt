{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "MhoQ0WE77laV"
   },
   "source": [
    "##### Copyright 2018 The TensorFlow Authors."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "cellView": "form",
    "colab": {},
    "colab_type": "code",
    "id": "_ckMIh7O7s6D"
   },
   "outputs": [],
   "source": [
    "#@title Licensed under the Apache License, Version 2.0 (the \"License\");\n",
    "# you may not use this file except in compliance with the License.\n",
    "# You may obtain a copy of the License at\n",
    "#\n",
    "# https://www.apache.org/licenses/LICENSE-2.0\n",
    "#\n",
    "# Unless required by applicable law or agreed to in writing, software\n",
    "# distributed under the License is distributed on an \"AS IS\" BASIS,\n",
    "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
    "# See the License for the specific language governing permissions and\n",
    "# limitations under the License."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "cellView": "form",
    "colab": {},
    "colab_type": "code",
    "id": "vasWnqRgy1H4"
   },
   "outputs": [],
   "source": [
    "#@title MIT License\n",
    "#\n",
    "# Copyright (c) 2017 François Chollet\n",
    "#\n",
    "# Permission is hereby granted, free of charge, to any person obtaining a\n",
    "# copy of this software and associated documentation files (the \"Software\"),\n",
    "# to deal in the Software without restriction, including without limitation\n",
    "# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n",
    "# and/or sell copies of the Software, and to permit persons to whom the\n",
    "# Software is furnished to do so, subject to the following conditions:\n",
    "#\n",
    "# The above copyright notice and this permission notice shall be included in\n",
    "# all copies or substantial portions of the Software.\n",
    "#\n",
    "# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n",
    "# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n",
    "# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n",
    "# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n",
    "# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n",
    "# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n",
    "# DEALINGS IN THE SOFTWARE."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "jYysdyb-CaWM"
   },
   "source": [
    "# Basic classification: Classify images of clothing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "S5Uhzt6vVIB2"
   },
   "source": [
    "<table class=\"tfo-notebook-buttons\" align=\"left\">\n",
    "  <td>\n",
    "    <a target=\"_blank\" href=\"https://www.tensorflow.org/tutorials/keras/classification\"><img src=\"https://www.tensorflow.org/images/tf_logo_32px.png\" />View on TensorFlow.org</a>\n",
    "  </td>\n",
    "  <td>\n",
    "    <a target=\"_blank\" href=\"https://colab.research.google.com/github/tensorflow/docs/blob/master/site/en/tutorials/keras/classification.ipynb\"><img src=\"https://www.tensorflow.org/images/colab_logo_32px.png\" />Run in Google Colab</a>\n",
    "  </td>\n",
    "  <td>\n",
    "    <a target=\"_blank\" href=\"https://github.com/tensorflow/docs/blob/master/site/en/tutorials/keras/classification.ipynb\"><img src=\"https://www.tensorflow.org/images/GitHub-Mark-32px.png\" />View source on GitHub</a>\n",
    "  </td>\n",
    "  <td>\n",
    "    <a href=\"https://storage.googleapis.com/tensorflow_docs/docs/site/en/tutorials/keras/classification.ipynb\"><img src=\"https://www.tensorflow.org/images/download_logo_32px.png\" />Download notebook</a>\n",
    "  </td>\n",
    "</table>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "FbVhjPpzn6BM"
   },
   "source": [
    "This guide trains a neural network model to classify images of clothing, like sneakers and shirts. It's okay if you don't understand all the details; this is a fast-paced overview of a complete TensorFlow program with the details explained as you go.\n",
    "\n",
    "This guide uses [tf.keras](https://www.tensorflow.org/guide/keras), a high-level API to build and train models in TensorFlow."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "jL3OqFKZ9dFg"
   },
   "outputs": [],
   "source": [
    "try:\n",
    "  # %tensorflow_version only exists in Colab.\n",
    "  %tensorflow_version 2.x\n",
    "except Exception:\n",
    "  pass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "dzLKpmZICaWN"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.1.0\n"
     ]
    }
   ],
   "source": [
    "from __future__ import absolute_import, division, print_function, unicode_literals\n",
    "\n",
    "# TensorFlow and tf.keras\n",
    "import tensorflow as tensorflow\n",
    "from tensorflow import keras\n",
    "\n",
    "# Helper libraries\n",
    "import numpy as nump\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "print(tf.__version__)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "yR0EdgrLCaWR"
   },
   "source": [
    "## Import the Fashion MNIST dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "DLdCchMdCaWQ"
   },
   "source": [
    "This guide uses the [Fashion MNIST](https://github.com/zalandoresearch/fashion-mnist) dataset which contains 70,000 grayscale images in 10 categories. The images show individual articles of clothing at low resolution (28 by 28 pixels), as seen here:\n",
    "\n",
    "<table>\n",
    "  <tr><td>\n",
    "    <img src=\"https://tensorflow.org/images/fashion-mnist-sprite.png\"\n",
    "         alt=\"Fashion MNIST sprite\"  width=\"600\">\n",
    "  </td></tr>\n",
    "  <tr><td align=\"center\">\n",
    "    <b>Figure 1.</b> <a href=\"https://github.com/zalandoresearch/fashion-mnist\">Fashion-MNIST samples</a> (by Zalando, MIT License).<br/>&nbsp;\n",
    "  </td></tr>\n",
    "</table>\n",
    "\n",
    "Fashion MNIST is intended as a drop-in replacement for the classic [MNIST](http://yann.lecun.com/exdb/mnist/) dataset—often used as the \"Hello, World\" of machine learning programs for computer vision. The MNIST dataset contains images of handwritten digits (0, 1, 2, etc.) in a format identical to that of the articles of clothing you'll use here.\n",
    "\n",
    "This guide uses Fashion MNIST for variety, and because it's a slightly more challenging problem than regular MNIST. Both datasets are relatively small and are used to verify that an algorithm works as expected. They're good starting points to test and debug code.\n",
    "\n",
    "Here, 60,000 images are used to train the network and 10,000 images to evaluate how accurately the network learned to classify images. You can access the Fashion MNIST directly from TensorFlow. Import and load the Fashion MNIST data directly from TensorFlow:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "7MqDQO0KCaWS"
   },
   "outputs": [],
   "source": [
    "fashion_mnist = keras.datasets.fashion_mnist\n",
    "\n",
    "(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "t9FDsUlxCaWW"
   },
   "source": [
    "Loading the dataset returns four NumPy arrays:\n",
    "\n",
    "* The `train_images` and `train_labels` arrays are the *training set*—the data the model uses to learn.\n",
    "* The model is tested against the *test set*, the `test_images`, and `test_labels` arrays.\n",
    "\n",
    "The images are 28x28 NumPy arrays, with pixel values ranging from 0 to 255. The *labels* are an array of integers, ranging from 0 to 9. These correspond to the *class* of clothing the image represents:\n",
    "\n",
    "<table>\n",
    "  <tr>\n",
    "    <th>Label</th>\n",
    "    <th>Class</th>\n",
    "  </tr>\n",
    "  <tr>\n",
    "    <td>0</td>\n",
    "    <td>T-shirt/top</td>\n",
    "  </tr>\n",
    "  <tr>\n",
    "    <td>1</td>\n",
    "    <td>Trouser</td>\n",
    "  </tr>\n",
    "    <tr>\n",
    "    <td>2</td>\n",
    "    <td>Pullover</td>\n",
    "  </tr>\n",
    "    <tr>\n",
    "    <td>3</td>\n",
    "    <td>Dress</td>\n",
    "  </tr>\n",
    "    <tr>\n",
    "    <td>4</td>\n",
    "    <td>Coat</td>\n",
    "  </tr>\n",
    "    <tr>\n",
    "    <td>5</td>\n",
    "    <td>Sandal</td>\n",
    "  </tr>\n",
    "    <tr>\n",
    "    <td>6</td>\n",
    "    <td>Shirt</td>\n",
    "  </tr>\n",
    "    <tr>\n",
    "    <td>7</td>\n",
    "    <td>Sneaker</td>\n",
    "  </tr>\n",
    "    <tr>\n",
    "    <td>8</td>\n",
    "    <td>Bag</td>\n",
    "  </tr>\n",
    "    <tr>\n",
    "    <td>9</td>\n",
    "    <td>Ankle boot</td>\n",
    "  </tr>\n",
    "</table>\n",
    "\n",
    "Each image is mapped to a single label. Since the *class names* are not included with the dataset, store them here to use later when plotting the images:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "IjnLH5S2CaWx"
   },
   "outputs": [],
   "source": [
    "class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',\n",
    "               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Brm0b_KACaWX"
   },
   "source": [
    "## Explore the data\n",
    "\n",
    "Let's explore the format of the dataset before training the model. The following shows there are 60,000 images in the training set, with each image represented as 28 x 28 pixels:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "zW5k_xz1CaWX"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(60000, 28, 28)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_images.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "cIAcvQqMCaWf"
   },
   "source": [
    "Likewise, there are 60,000 labels in the training set:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "TRFYHB2mCaWb"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "60000"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(train_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "YSlYxFuRCaWk"
   },
   "source": [
    "Each label is an integer between 0 and 9:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "XKnCTHz4CaWg"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([9, 0, 0, ..., 3, 0, 5], dtype=uint8)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_labels"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "TMPI88iZpO2T"
   },
   "source": [
    "There are 10,000 images in the test set. Again, each image is represented as 28 x 28 pixels:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "2KFnYlcwCaWl"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10000, 28, 28)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_images.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "rd0A0Iu0CaWq"
   },
   "source": [
    "And the test set contains 10,000 images labels:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "iJmPr5-ACaWn"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10000"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(test_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "ES6uQoLKCaWr"
   },
   "source": [
    "## Preprocess the data\n",
    "\n",
    "The data must be preprocessed before training the network. If you inspect the first image in the training set, you will see that the pixel values fall in the range of 0 to 255:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "m4VEw8Ud9Quh"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "plt.imshow(train_images[0])\n",
    "plt.colorbar()\n",
    "plt.grid(False)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Wz7l27Lz9S1P"
   },
   "source": [
    "Scale these values to a range of 0 to 1 before feeding them to the neural network model. To do so, divide the values by 255. It's important that the *training set* and the *testing set* be preprocessed in the same way:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "bW5WzIPlCaWv"
   },
   "outputs": [],
   "source": [
    "train_images = train_images / 255.0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Ee638AlnCaWz"
   },
   "source": [
    "To verify that the data is in the correct format and that you're ready to build and train the network, let's display the first 25 images from the *training set* and display the class name below each image."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "oZTImqg_CaW1"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 25 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,10))\n",
    "for i in range(25):\n",
    "    plt.subplot(5,5,i+1)\n",
    "    plt.xticks([])\n",
    "    plt.yticks([])\n",
    "    plt.grid(False)\n",
    "    plt.imshow(train_images[i], cmap=plt.cm.binary)\n",
    "    plt.xlabel(class_names[train_labels[i]])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "59veuiEZCaW4"
   },
   "source": [
    "## Build the model\n",
    "\n",
    "Building the neural network requires configuring the layers of the model, then compiling the model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Gxg1XGm0eOBy"
   },
   "source": [
    "### Set up the layers\n",
    "\n",
    "The basic building block of a neural network is the *layer*. Layers extract representations from the data fed into them. Hopefully, these representations are meaningful for the problem at hand.\n",
    "\n",
    "Most of deep learning consists of chaining together simple layers. Most layers, such as `tf.keras.layers.Dense`, have parameters that are learned during training."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "9ODch-OFCaW4"
   },
   "outputs": [],
   "source": [
    "model = keras.Sequential([\n",
    "    keras.layers.Flatten(input_shape=(28, 28)),\n",
    "    keras.layers.Dense(100, activation='relu'),\n",
    "    keras.layers.Dense(5)\n",
    "])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "gut8A_7rCaW6"
   },
   "source": [
    "The first layer in this network, `tf.keras.layers.Flatten`, transforms the format of the images from a two-dimensional array (of 28 by 28 pixels) to a one-dimensional array (of 28 * 28 = 784 pixels). Think of this layer as unstacking rows of pixels in the image and lining them up. This layer has no parameters to learn; it only reformats the data.\n",
    "\n",
    "After the pixels are flattened, the network consists of a sequence of two `tf.keras.layers.Dense` layers. These are densely connected, or fully connected, neural layers. The first `Dense` layer has 128 nodes (or neurons). The second (and last) layer is a 10-node *softmax* layer that returns an array of 10 probability scores that sum to 1. Each node contains a score that indicates the probability that the current image belongs to one of the 10 classes.\n",
    "\n",
    "### Compile the model\n",
    "\n",
    "Before the model is ready for training, it needs a few more settings. These are added during the model's *compile* step:\n",
    "\n",
    "* *Loss function* —This measures how accurate the model is during training. You want to minimize this function to \"steer\" the model in the right direction.\n",
    "* *Optimizer* —This is how the model is updated based on the data it sees and its loss function.\n",
    "* *Metrics* —Used to monitor the training and testing steps. The following example uses *accuracy*, the fraction of the images that are correctly classified."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Lhan11blCaW7"
   },
   "outputs": [],
   "source": [
    "model.compile(optimizer='adam',\n",
    "              loss=tf.keras.losses.CategoricalCrossentropy(from_logits=True),\n",
    "              metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "qKF6uW-BCaW-"
   },
   "source": [
    "## Train the model\n",
    "\n",
    "Training the neural network model requires the following steps:\n",
    "\n",
    "1. Feed the training data to the model. In this example, the training data is in the `train_images` and `train_labels` arrays.\n",
    "2. The model learns to associate images and labels.\n",
    "3. You ask the model to make predictions about a test set—in this example, the `test_images` array.\n",
    "4. Verify that the predictions match the labels from the `test_labels` array.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Z4P4zIV7E28Z"
   },
   "source": [
    "### Feed the model\n",
    "\n",
    "To start training,  call the `model.fit` method—so called because it \"fits\" the model to the training data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "xvwvpA64CaW_"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 60000 samples\n",
      "Epoch 1/10\n",
      "60000/60000 [==============================] - 4s 67us/sample - loss: 0.4906 - accuracy: 0.8262\n",
      "Epoch 2/10\n",
      "60000/60000 [==============================] - 4s 59us/sample - loss: 0.3703 - accuracy: 0.8654\n",
      "Epoch 3/10\n",
      "60000/60000 [==============================] - 4s 59us/sample - loss: 0.3339 - accuracy: 0.8783\n",
      "Epoch 4/10\n",
      "60000/60000 [==============================] - 4s 63us/sample - loss: 0.3108 - accuracy: 0.8860\n",
      "Epoch 5/10\n",
      "60000/60000 [==============================] - 4s 64us/sample - loss: 0.2910 - accuracy: 0.8932\n",
      "Epoch 6/10\n",
      "60000/60000 [==============================] - 3s 58us/sample - loss: 0.2785 - accuracy: 0.8961\n",
      "Epoch 7/10\n",
      "60000/60000 [==============================] - 3s 58us/sample - loss: 0.2668 - accuracy: 0.9016\n",
      "Epoch 8/10\n",
      "60000/60000 [==============================] - 3s 58us/sample - loss: 0.2553 - accuracy: 0.9050\n",
      "Epoch 9/10\n",
      "60000/60000 [==============================] - 3s 57us/sample - loss: 0.2455 - accuracy: 0.9093\n",
      "Epoch 10/10\n",
      "60000/60000 [==============================] - 3s 58us/sample - loss: 0.2383 - accuracy: 0.9110\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<tensorflow.python.keras.callbacks.History at 0x7fd6694a9358>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(train_images, test_labels, epochs=10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "W3ZVOhugCaXA"
   },
   "source": [
    "As the model trains, the loss and accuracy metrics are displayed. This model reaches an accuracy of about 0.91 (or 91%) on the training data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "wCpr6DGyE28h"
   },
   "source": [
    "### Evaluate accuracy\n",
    "\n",
    "Next, compare how the model performs on the test dataset:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "VflXLEeECaXC"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10000/10000 - 1s - loss: 0.3470 - accuracy: 0.8807\n",
      "\n",
      "Test accuracy: 0.8807\n"
     ]
    }
   ],
   "source": [
    "test_loss, test_acc = model.evaluate(train_images,  test_labels, verbose=2)\n",
    "\n",
    "print('\\nTest accuracy:', test_acc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "yWfgsmVXCaXG"
   },
   "source": [
    "It turns out that the accuracy on the test dataset is a little less than the accuracy on the training dataset. This gap between training accuracy and test accuracy represents *overfitting*. Overfitting happens when a machine learning model performs worse on new, previously unseen inputs than it does on the training data. An overfitted model \"memorizes\" the noise and details in the training dataset to a point where it negatively impacts the performance of the model on the new data. For more information, see the following:\n",
    "*   [Demonstrate overfitting](https://www.tensorflow.org/tutorials/keras/overfit_and_underfit#demonstrate_overfitting)\n",
    "*   [Strategies to prevent overfitting](https://www.tensorflow.org/tutorials/keras/overfit_and_underfit#strategies_to_prevent_overfitting)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "v-PyD1SYE28q"
   },
   "source": [
    "### Make predictions\n",
    "\n",
    "With the model trained, you can use it to make predictions about some images.\n",
    "The model's linear outputs, [logits](https://developers.google.com/machine-learning/glossary#logits). Attach a softmax layer to convert the logits to probabilities, which are easier to interpret. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "DnfNA0CrQLSD"
   },
   "outputs": [],
   "source": [
    "probability_model = tf.keras.Sequential([model, \n",
    "                                         tf.keras.layers.Softmax()])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Gl91RPhdCaXI"
   },
   "outputs": [],
   "source": [
    "predictions = probability_model.predict(test_images)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "x9Kk1voUCaXJ"
   },
   "source": [
    "Here, the model has predicted the label for each image in the testing set. Let's take a look at the first prediction:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "3DmJEUinCaXK"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2.4805914e-13, 1.6399110e-14, 7.0034888e-11, 9.1453233e-15,\n",
       "       1.5250519e-08, 2.2124483e-04, 4.8677962e-10, 3.7864647e-03,\n",
       "       1.5206650e-09, 9.9599224e-01], dtype=float32)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictions[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "-hw1hgeSCaXN"
   },
   "source": [
    "A prediction is an array of 10 numbers. They represent the model's \"confidence\" that the image corresponds to each of the 10 different articles of clothing. You can see which label has the highest confidence value:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "qsqenuPnCaXO"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.argmax(predictions[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "E51yS7iCCaXO"
   },
   "source": [
    "So, the model is most confident that this image is an ankle boot, or `class_names[9]`. Examining the test label shows that this classification is correct:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Sd7Pgsu6CaXP"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_labels[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "ygh2yYC972ne"
   },
   "source": [
    "Graph this to look at the full set of 10 class predictions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "DvYmmrpIy6Y1"
   },
   "outputs": [],
   "source": [
    "def plot_image(i, predictions_array, true_label, img):\n",
    "  predictions_array, true_label, img = predictions_array, true_label[i], img[i]\n",
    "  plt.grid(False)\n",
    "  plt.xticks([])\n",
    "  plt.yticks([])\n",
    "\n",
    "  plt.imshow(img, cmap=plt.cm.binary)\n",
    "\n",
    "  predicted_label = np.argmax(predictions_array)\n",
    "  if predicted_label == true_label:\n",
    "    color = 'blue'\n",
    "  else:\n",
    "    color = 'red'\n",
    "\n",
    "  plt.xlabel(\"{} {:2.0f}% ({})\".format(class_names[predicted_label],\n",
    "                                100*np.max(predictions_array),\n",
    "                                class_names[true_label]),\n",
    "                                color=color)\n",
    "\n",
    "def plot_value_array(i, predictions_array, true_label):\n",
    "  predictions_array, true_label = predictions_array, true_label[i]\n",
    "  plt.grid(False)\n",
    "  plt.xticks(range(10))\n",
    "  plt.yticks([])\n",
    "  thisplot = plt.bar(range(10), predictions_array, color=\"#777777\")\n",
    "  plt.ylim([0, 1])\n",
    "  predicted_label = np.argmax(predictions_array)\n",
    "\n",
    "  thisplot[predicted_label].set_color('red')\n",
    "  thisplot[true_label].set_color('blue')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Zh9yABaME29S"
   },
   "source": [
    "### Verify predictions\n",
    "\n",
    "With the model trained, you can use it to make predictions about some images."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "d4Ov9OFDMmOD"
   },
   "source": [
    "Let's look at the 0th image, predictions, and prediction array. Correct prediction labels are blue and incorrect prediction labels are red. The number gives the percentage (out of 100) for the predicted label."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "HV5jw-5HwSmO"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "i = 0\n",
    "plt.figure(figsize=(6,3))\n",
    "plt.subplot(1,2,1)\n",
    "plot_image(i, predictions[i], test_labels, test_images)\n",
    "plt.subplot(1,2,2)\n",
    "plot_value_array(i, predictions[i],  test_labels)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Ko-uzOufSCSe"
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAWAAAADCCAYAAAB3whgdAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjAsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8GearUAAARaElEQVR4nO3de7CdVXnH8e+TK0kIJhhIUgkE0AASUTGglHLxEsSWgnY69VIKUm9VsV6mdWx1pFSgdqaiQAv1AqlWVBShBUpF1FKoAoUETKIwgIoQYgIZTLiFhCRP/3jflJOz187Z+4RkxeT7mTmTc9Ze633XfpP8ztrvWmvvyEwkSdveiNodkKSdlQEsSZUYwJJUiQEsSZUYwJJUiQEsSZWMqt0BqbYpU6bkzJkza3dDO6j58+evyMw9So8ZwNrpzZw5k9tvv712N37zTJsGy5f3VnfqVFi2bOv2ZzsVEb/s9pi3ICQNT6/h22/dnYgBLEmVGMCSVElf94CdrNDWdP/997NixYqo3Q9pW+krgJ2s0NY0Z86c2l2QtilvQUhSJQawJFViAEtSJQawJFViAEtSJQawJFViAEtSJQawJFViAEtSJQawJFViAEtSJQawJFViAEtSJQawJFViAEtSJQawJFViAEtSJQawJFViAEtSJQawJFViAEtSJQawJFViAEtSJQawJFViAEtSJQawJFViAEtSJQawJFViAEtSJQawJFViAEtSJQawJFViAEtSJQawJFViAEtSJQawJFViAEtSJQawJFViAEtSJQawJFViAEtSJQawJFViAEtSJQawJFViAEtSJQawJFUyqnYHtmcXXnhhsXzx4sU91+1VZhbLI2KLjitp++UIWJIqMYAlqRIDWJIqMYAlqRIDWJIq2eJVEKtXry6Wjxs3bouOMWbMmGH3aaORI0f2XPeaa67pKFu6dGmx7p577tlRdsopp3SUnX322cX2M2bM6CjrZ7XD+vXre67bzzWQtG05ApakSgxgSarEAJakSgxgSapkiyfhSpNPAKeffnpH2THHHFOs28+E3dZS2kp8+OGHF+uWJgj32muvjrLLLrus2L40ifemN72pWHfixIkdZd0m1kqTc922OG8pt0hLW84RsCRVYgBLUiUGsCRVYgBLUiUGsCRV0tcqiA0bNvDkk09uUrZkyZJi3auu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\n",
      "text/plain": [
       "<Figure size 432x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "i = 12\n",
    "plt.figure(figsize=(6,3))\n",
    "plt.subplot(1,2,1)\n",
    "plot_image(i, predictions[i], test_labels, test_images)\n",
    "plt.subplot(1,2,2)\n",
    "plot_value_array(i, predictions[i],  test_labels)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "kgdvGD52CaXR"
   },
   "source": [
    "Let's plot several images with their predictions. Note that the model can be wrong even when very confident."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "hQlnbqaw2Qu_"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x720 with 30 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the first X test images, their predicted labels, and the true labels.\n",
    "# Color correct predictions in blue and incorrect predictions in red.\n",
    "num_rows = 5\n",
    "num_cols = 3\n",
    "num_images = num_rows*num_cols\n",
    "plt.figure(figsize=(2*2*num_cols, 2*num_rows))\n",
    "for i in range(num_images):\n",
    "  plt.subplot(num_rows, 2*num_cols, 2*i+1)\n",
    "  plot_image(i, predictions[i], test_labels, test_images)\n",
    "  plt.subplot(num_rows, 2*num_cols, 2*i+2)\n",
    "  plot_value_array(i, predictions[i], test_labels)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "R32zteKHCaXT"
   },
   "source": [
    "## Use the trained model\n",
    "\n",
    "Finally, use the trained model to make a prediction about a single image."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "yRJ7JU7JCaXT"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(28, 28)\n"
     ]
    }
   ],
   "source": [
    "# Grab an image from the test dataset.\n",
    "img = test_images[1]\n",
    "\n",
    "print(img.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "vz3bVp21CaXV"
   },
   "source": [
    "`tf.keras` models are optimized to make predictions on a *batch*, or collection, of examples at once. Accordingly, even though you're using a single image, you need to add it to a list:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "lDFh5yF_CaXW"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 28, 28)\n"
     ]
    }
   ],
   "source": [
    "# Add the image to a batch where it's the only member.\n",
    "img = (np.expand_dims(img,0))\n",
    "\n",
    "print(img.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "EQ5wLTkcCaXY"
   },
   "source": [
    "Now predict the correct label for this image:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "o_rzNSdrCaXY"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[2.2230249e-06 3.6624799e-13 9.9967766e-01 7.1137568e-11 3.1002561e-04\n",
      "  7.9490191e-17 1.0093640e-05 1.9550982e-19 3.2532780e-14 2.0363733e-18]]\n"
     ]
    }
   ],
   "source": [
    "predictions_single = probability_model.predict(img)\n",
    "\n",
    "print(predictions_single)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "6Ai-cpLjO-3A"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_value_array(1, predictions_single[0], test_labels)\n",
    "_ = plt.xticks(range(10), class_names, rotation=45)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "cU1Y2OAMCaXb"
   },
   "source": [
    "`keras.Model.predict` returns a list of lists—one list for each image in the batch of data. Grab the predictions for our (only) image in the batch:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "2tRmdq_8CaXb"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.argmax(predictions_single[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "YFc2HbEVCaXd"
   },
   "source": [
    "And the model predicts a label as expected."
   ]
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "classification.ipynb",
   "private_outputs": true,
   "provenance": [],
   "toc_visible": true
  },
  "kernelspec": {
   "display_name": "Python (practice)",
   "language": "python",
   "name": "practice"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
